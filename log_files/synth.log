Qflow synthesis logfile created on Wed Apr 6 14:41:59 IST 2022
Running yosys for verilog parsing and synthesis
yosys  -s det_1011.ys

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.16+2 (git sha1 UNKNOWN, gcc 4.8.5 -fPIC -Os)


-- Executing script file `det_1011.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v
Parsing Verilog input from `/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v' to AST representation.
Generating RTLIL representation for module `\det_1011'.
Note: Assuming pure combinatorial block at /home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23.3-49.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \det_1011

3.1.2. Analyzing design hierarchy..
Top module:  \det_1011
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5 in module det_1011.
Marked 1 switch rules as full_case in process $proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3 in module det_1011.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
     1/5: $5\next_state[2:0]
     2/5: $4\next_state[2:0]
     3/5: $3\next_state[2:0]
     4/5: $2\next_state[2:0]
     5/5: $1\next_state[2:0]
Creating decoders for process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
     1/1: $0\cur_state[2:0]

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\det_1011.\next_state' from process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5': $auto$proc_dlatch.cc:427:proc_dlatch$84

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\det_1011.\cur_state' using process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
  created $dff cell `$procdff$85' with positive edge clock.

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
Removing empty process `det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
Found and cleaned up 1 empty switch in `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
Removing empty process `det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
Cleaned up 6 empty switches.

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~15 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 6 unused cells and 29 unused wires.
<suppressed ~7 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module det_1011...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \det_1011.
    New ctrl vector for $pmux cell $procmux$41: { $procmux$45_CMP $procmux$44_CMP $procmux$43_CMP $eq$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:14$1_Y }
  Optimizing cells in module \det_1011.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$85 ($dff) from module det_1011 (D = \next_state, Q = \cur_state, rval = 3'000).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from mux cell det_1011.$ternary$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:14$2 ($mux).
Removed top 1 bits (of 3) from mux cell det_1011.$procmux$17 ($mux).
Removed top 1 bits (of 3) from mux cell det_1011.$procmux$26 ($mux).
Removed top 2 bits (of 3) from mux cell det_1011.$procmux$36 ($mux).
Removed top 1 bits (of 3) from port B of cell det_1011.$procmux$43_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell det_1011.$procmux$44_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell det_1011.$procmux$45_CMP0 ($eq).
Removed top 2 bits (of 3) from wire det_1011.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire det_1011.$3\next_state[2:0].

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module det_1011:
  created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~2 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \det_1011.
    Consolidated identical input bits for $mux cell $procmux$17:
      Old ports: A=2'00, B=2'11, Y=$4\next_state[2:0] [1:0]
      New ports: A=1'0, B=1'1, Y=$4\next_state[2:0] [0]
      New connections: $4\next_state[2:0] [1] = $4\next_state[2:0] [0]
    Consolidated identical input bits for $mux cell $procmux$26:
      Old ports: A=2'10, B=2'00, Y=$3\next_state[2:0]
      New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [1]
      New connections: $3\next_state[2:0] [0] = 1'0
    Consolidated identical input bits for $mux cell $procmux$9:
      Old ports: A=3'000, B=3'100, Y=$5\next_state[2:0]
      New ports: A=1'0, B=1'1, Y=$5\next_state[2:0] [2]
      New connections: $5\next_state[2:0] [1:0] = 2'00
  Optimizing cells in module \det_1011.
Performed a total of 3 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~2 debug messages>

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~111 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~33 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 1 unused cells and 41 unused wires.
<suppressed ~2 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\det_1011' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 36 wires to a netlist network with 4 inputs and 5 outputs.

3.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:               MUX cells:        3
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:        internal signals:       27
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        5
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \det_1011

3.24.2. Analyzing design hierarchy..
Top module:  \det_1011
Removed 0 unused modules.

3.25. Printing statistics.

=== det_1011 ===

   Number of wires:                 25
   Number of wire bits:             31
   Number of public wires:           6
   Number of public wire bits:      10
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 28
     $_ANDNOT_                       6
     $_AND_                          3
     $_DLATCH_N_                     3
     $_MUX_                          3
     $_NAND_                         2
     $_NOR_                          1
     $_NOT_                          1
     $_ORNOT_                        2
     $_OR_                           4
     $_SDFF_PN0_                     3

3.26. Executing CHECK pass (checking for obvious problems).
Checking module det_1011...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
  cell DFFNEGX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_N_.
  cell DFFPOSX1 (noninv, pins=3, area=864.00) is a direct match for cell type $_DFF_P_.
  cell DFFSR (noninv, pins=5, area=1584.00) is a direct match for cell type $_DFFSR_PNN_.
  final dff cell mappings:
    \DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
    \DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
    unmapped dff cell: $_DFF_NN0_
    unmapped dff cell: $_DFF_NN1_
    unmapped dff cell: $_DFF_NP0_
    unmapped dff cell: $_DFF_NP1_
    unmapped dff cell: $_DFF_PN0_
    unmapped dff cell: $_DFF_PN1_
    unmapped dff cell: $_DFF_PP0_
    unmapped dff cell: $_DFF_PP1_
    unmapped dff cell: $_DFFSR_NNN_
    unmapped dff cell: $_DFFSR_NNP_
    unmapped dff cell: $_DFFSR_NPN_
    unmapped dff cell: $_DFFSR_NPP_
    \DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
    unmapped dff cell: $_DFFSR_PNP_
    unmapped dff cell: $_DFFSR_PPN_
    unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\det_1011':
  mapped 3 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \det_1011.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\det_1011' to `<abc-temp-dir>/input.blif'..
Extracted 25 gates and 34 wires to a netlist network with 8 inputs and 8 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lib -w /usr/local/share/qflow/tech/osu050/osu05_stdcells.lib 
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu05_stdcells" from "/usr/local/share/qflow/tech/osu050/osu05_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig 
ABC: + retime 
ABC: + strash 
ABC: + dch -f 
ABC: + map -M 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:             INVX1 cells:        3
ABC RESULTS:           NAND2X1 cells:        2
ABC RESULTS:            NOR2X1 cells:        4
ABC RESULTS:           OAI21X1 cells:        3
ABC RESULTS:        internal signals:       18
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        8
Removing temp directory.

7. Executing FLATTEN pass (flatten design).

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 33 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port det_1011.clk: Missing option -inpad.
Don't map input port det_1011.in: Missing option -inpad.
Mapping port det_1011.out using BUFX2.
Don't map input port det_1011.rstn: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \det_1011.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== det_1011 ===

   Number of wires:                 21
   Number of wire bits:             27
   Number of public wires:          21
   Number of public wire bits:      27
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 24
     $_DLATCH_N_                     3
     AND2X2                          4
     AOI21X1                         1
     BUFX2                           1
     DFFPOSX1                        3
     INVX1                           3
     NAND2X1                         2
     NOR2X1                          4
     OAI21X1                         3

End of script. Logfile hash: 934a837e54, CPU: user 0.11s system 0.01s, MEM: 8.16 MB peak
Yosys 0.16+2 (git sha1 UNKNOWN, gcc 4.8.5 -fPIC -Os)
Time spent: 52% 2x abc (0 sec), 12% 21x opt_expr (0 sec), ...
Running getpowerground to determine power and ground net names.
getpowerground.tcl  /usr/local/share/qflow/tech/osu050/osu050_stdcells.lef
Cleaning up output syntax
ypostproc.tcl det_1011_mapped.blif det_1011 /usr/local/share/qflow/tech/osu050/osu050.sh vdd gnd 
Cleaning up blif file syntax
Running blifFanout (iterative)
Each iteration calls:
blifFanout -l 300 -c 75 -I det_1011_nofanout -s nullstring -p /usr/local/share/qflow/tech/osu050/osu05_stdcells.lib -b BUFX2,CLKBUF1 -i A,A -o Y,Y tmp.blif det_1011.blif

blifFanout for qflow 1.3.17
Parsing library "osu05_stdcells"
End of library at line 6606
Lib Read:  Processed 6607 lines.
Error: did not find pin .latch
Top internal fanout is 4 (load 462.555) from node cur_state[1],
driven by DFFPOSX1 with strength 549.757 (fF driven at latency 300)
Top fanout load-to-strength ratio is 0.841381 (latency = 252.414 ps)
Top input node fanout is 3 (load 149.787) from node in.
Error: did not find pin .latch
0 gates exceed specified minimum load.
0 buffers were added.
0 gates were changed.

Gate counts by drive strength:

	"1" gates	In: 16    	Out: 16    	+0
	"2" gates	In: 5    	Out: 5    	+0

Number of gates changed: 0
gates resized: 0

Generating RTL verilog and SPICE netlist file in directory
	 /home/vlsilab/vsdflow/qflow_experiments/synthesis
Files:
   Verilog: /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.rtl.v
   Verilog: /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.rtlnopwr.v
   Verilog: /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.rtlbb.v
   Spice:   /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.spc

Running blif2Verilog.
Running blif2BSpice.
Running spi2xspice.py
spi2xspice.py "/usr/local/share/qflow/tech/osu050/osu05_stdcells.lib" det_1011.spc det_1011.xspice

Synthesis script ended on Wed Apr 6 14:42:00 IST 2022
