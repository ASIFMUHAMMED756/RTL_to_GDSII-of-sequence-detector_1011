Starting new log file Wed Apr  6 14:23:19 2022

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project map9v3
Running yosys for verilog parsing and synthesis
yosys  -s map9v3.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.16+2 (git sha1 UNKNOWN, gcc 4.8.5 -fPIC -Os)


-- Executing script file `map9v3.ys' --

1. Executing Liberty frontend.
Imported 39 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v
Parsing Verilog input from `/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v' to AST representation.
Generating RTLIL representation for module `\map9v3'.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \map9v3

3.1.2. Analyzing design hierarchy..
Top module:  \map9v3
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:27$1 in module map9v3.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \reset in `\map9v3.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:27$1'.

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\map9v3.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:27$1'.
1/14: $0\dp[8:0] [8:1]
2/14: $0\dp[8:0] [0]
3/14: $0\sr[7:0] [0]
4/14: $0\sr[7:0] [2]
5/14: $0\sr[7:0] [3]
6/14: $0\sr[7:0] [4]
7/14: $0\sr[7:0] [5]
8/14: $0\sr[7:0] [6]
9/14: $0\sr[7:0] [7]
10/14: $0\state[2:0]
11/14: $0\startbuf[1:0]
12/14: $0\counter[7:0]
13/14: $0\done[0:0]
14/14: $0\sr[7:0] [1]

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\map9v3.\dp' using process `\map9v3.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:27$1'.
created $adff cell `$procdff$119' with positive edge clock and positive level reset.
Creating register for signal `\map9v3.\done' using process `\map9v3.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:27$1'.
created $adff cell `$procdff$120' with positive edge clock and positive level reset.
Creating register for signal `\map9v3.\counter' using process `\map9v3.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:27$1'.
created $adff cell `$procdff$121' with positive edge clock and positive level reset.
Creating register for signal `\map9v3.\sr' using process `\map9v3.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:27$1'.
created $adff cell `$procdff$122' with positive edge clock and positive level reset.
Creating register for signal `\map9v3.\startbuf' using process `\map9v3.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:27$1'.
created $adff cell `$procdff$123' with positive edge clock and positive level reset.
Creating register for signal `\map9v3.\state' using process `\map9v3.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:27$1'.
created $adff cell `$procdff$124' with positive edge clock and positive level reset.

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 7 empty switches in `\map9v3.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:27$1'.
Removing empty process `map9v3.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:27$1'.
Cleaned up 7 empty switches.

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~3 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 50 unused wires.
<suppressed ~1 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module map9v3...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.6.9. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).
Found FSM state register map9v3.state.

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).
Extracting FSM `\state' from module `\map9v3'.
found $adff cell for state register: $procdff$124
root of input selection tree: $0\state[2:0]
found reset state: 3'000 (from async reset)
found ctrl input: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:40$3_Y
found ctrl input: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:46$6_Y
found ctrl input: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:60$13_Y
found ctrl input: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:65$14_Y
found ctrl input: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:69$15_Y
found ctrl input: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:70$16_Y
found state code: 3'100
found state code: 3'011
found ctrl input: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:56$12_Y
found state code: 3'010
found state code: 3'001
found ctrl output: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:40$3_Y
found ctrl output: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:46$6_Y
found ctrl output: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:60$13_Y
found ctrl output: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:65$14_Y
found ctrl output: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:69$15_Y
ctrl inputs: { $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:70$16_Y $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:56$12_Y }
ctrl outputs: { $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:69$15_Y $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:65$14_Y $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:60$13_Y $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:46$6_Y $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:40$3_Y $0\state[2:0] }
transition:      3'000 2'-- ->      3'001 8'00001001
transition:      3'100 2'0- ->      3'100 8'10000100
transition:      3'100 2'1- ->      3'000 8'10000000
transition:      3'010 2'-- ->      3'011 8'00100011
transition:      3'001 2'-0 ->      3'001 8'00010001
transition:      3'001 2'-1 ->      3'010 8'00010010
transition:      3'011 2'-- ->      3'100 8'01000100

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$125' from module `\map9v3'.

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 13 unused cells and 13 unused wires.
<suppressed ~14 debug messages>

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).
Optimizing FSM `$fsm$\state$125' from module `\map9v3'.
Removing unused output signal $0\state[2:0] [0].
Removing unused output signal $0\state[2:0] [1].
Removing unused output signal $0\state[2:0] [2].
Removing unused output signal $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:69$15_Y.

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).
Recoding FSM `$fsm$\state$125' from module `\map9v3' using `auto' encoding:
mapping auto encoding to `one-hot` for this FSM.
000 -> ----1
100 -> ---1-
010 -> --1--
001 -> -1---
011 -> 1----

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

FSM `$fsm$\state$125' from module `map9v3':
-------------------------------------

Information on FSM $fsm$\state$125 (\state):

Number of input signals:    2
Number of output signals:   4
Number of state bits:       5

Input signals:
0: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:56$12_Y
1: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:70$16_Y

Output signals:
0: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:40$3_Y
1: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:46$6_Y
2: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:60$13_Y
3: $eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:65$14_Y

State encoding:
0:    5'----1  <RESET STATE>
1:    5'---1-
2:    5'--1--
3:    5'-1---
4:    5'1----

Transition Table (state_in, ctrl_in, state_out, ctrl_out):
0:     0 2'--   ->     3 4'0001
1:     1 2'1-   ->     0 4'0000
2:     1 2'0-   ->     1 4'0000
3:     2 2'--   ->     4 4'0100
4:     3 2'-1   ->     2 4'0010
5:     3 2'-0   ->     3 4'0010
6:     4 2'--   ->     1 4'1000

-------------------------------------

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).
Mapping FSM `$fsm$\state$125' from module `\map9v3'.

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~4 debug messages>

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $procdff$122 ($adff) from module map9v3 (D = $0\sr[7:0], Q = \sr).
Adding EN signal on $procdff$121 ($adff) from module map9v3 (D = $0\counter[7:0], Q = \counter).
Adding EN signal on $procdff$120 ($adff) from module map9v3 (D = $0\done[0:0], Q = \done).
Adding EN signal on $procdff$119 ($adff) from module map9v3 (D = { \sr \N [0] }, Q = \dp).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 6 unused cells and 15 unused wires.
<suppressed ~7 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~3 debug messages>

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.8.16. Rerunning OPT passes. (Maybe there is more to do..)

3.8.17. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.8.18. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.8.19. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.8.20. Executing OPT_DFF pass (perform DFF optimizations).

3.8.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.8.22. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.8.23. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 24 bits (of 32) from port A of cell map9v3.$sub$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$4 ($sub).
Removed top 23 bits (of 32) from port Y of cell map9v3.$sub$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$4 ($sub).
Removed top 30 bits (of 32) from port B of cell map9v3.$add$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$5 ($add).
Removed top 24 bits (of 32) from port Y of cell map9v3.$add$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$5 ($add).
Removed top 24 bits (of 32) from port A of cell map9v3.$add$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$5 ($add).
Removed top 31 bits (of 32) from port B of cell map9v3.$sub$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:55$11 ($sub).
Removed top 24 bits (of 32) from port Y of cell map9v3.$sub$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:55$11 ($sub).
Removed top 1 bits (of 2) from port B of cell map9v3.$eq$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:70$16 ($eq).
Removed cell map9v3.$procmux$36 ($mux).
Removed cell map9v3.$procmux$42 ($mux).
Removed cell map9v3.$procmux$48 ($mux).
Removed cell map9v3.$procmux$54 ($mux).
Removed cell map9v3.$procmux$60 ($mux).
Removed cell map9v3.$procmux$66 ($mux).
Removed cell map9v3.$procmux$72 ($mux).
Removed cell map9v3.$procmux$96 ($mux).
Removed top 1 bits (of 3) from port B of cell map9v3.$auto$opt_dff.cc:195:make_patterns_logic$164 ($ne).
Removed cell map9v3.$procmux$102 ($mux).
Removed cell map9v3.$procmux$105 ($mux).
Removed cell map9v3.$procmux$108 ($mux).
Removed cell map9v3.$procmux$114 ($mux).
Removed top 1 bits (of 9) from port Y of cell map9v3.$sub$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$4 ($sub).
Removed top 24 bits (of 32) from wire map9v3.$add$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$5_Y.
Removed top 24 bits (of 32) from wire map9v3.$sub$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$4_Y.

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 14 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module map9v3:
creating $macc model for $add$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$5 ($add).
creating $macc model for $sub$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$4 ($sub).
creating $macc model for $sub$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:55$11 ($sub).
merging $macc model for $sub$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$4 into $add$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$5.
creating $alu model for $macc $sub$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:55$11.
creating $macc cell for $add$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:41$5: $auto$alumacc.cc:365:replace_macc$178
creating $alu cell for $sub$/home/vlsilab/vsdflow/qflow_experiments/source/map9v3.v:55$11: $auto$alumacc.cc:485:replace_alu$179
created 1 $alu and 1 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.14.9. Rerunning OPT passes. (Maybe there is more to do..)

3.14.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~10 debug messages>

3.14.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.14.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.14.13. Executing OPT_DFF pass (perform DFF optimizations).

3.14.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.14.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.14.16. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~1 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~9 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \map9v3.
Performed a total of 0 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

3.19.10. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper maccmap for cells of type $macc.
sub \N [8:1] (8 bits, unsigned)
add 8'00000010 (8 bits, unsigned)
Using template $paramod$403a3c2fa431a154c52a6a5429d7a6260b5d144f\_90_alu for cells of type $alu.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $adffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $reduce_bool.
Using extmapper simplemap for cells of type $adff.
Using template $paramod$a1bc51c02ce12ac21eb18988e83292af48ed7d72\_90_alu for cells of type $alu.
Using template $paramod\_90_lcu\WIDTH=32'00000000000000000000000000001000 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~330 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~97 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 11 unused cells and 101 unused wires.
<suppressed ~12 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\map9v3' to `<abc-temp-dir>/input.blif'..
Extracted 108 gates and 140 wires to a netlist network with 31 inputs and 24 outputs.

3.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:       23
ABC RESULTS:               MUX cells:        8
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        9
ABC RESULTS:               NOT cells:        4
ABC RESULTS:                OR cells:        9
ABC RESULTS:             ORNOT cells:        4
ABC RESULTS:              XNOR cells:        5
ABC RESULTS:               XOR cells:       12
ABC RESULTS:        internal signals:       85
ABC RESULTS:           input signals:       31
ABC RESULTS:          output signals:       24
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.
<suppressed ~8 debug messages>

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
<suppressed ~9 debug messages>
Removed a total of 3 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 101 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \map9v3

3.24.2. Analyzing design hierarchy..
Top module:  \map9v3
Removed 0 unused modules.

3.25. Printing statistics.

=== map9v3 ===

Number of wires:                 72
Number of wire bits:            121
Number of public wires:          10
Number of public wire bits:      45
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                109
$_ANDNOT_                      23
$_AND_                          3
$_DFFE_PP0P_                   26
$_DFF_PP0_                      6
$_DFF_PP1_                      1
$_MUX_                          8
$_NAND_                         2
$_NOR_                          6
$_NOT_                          4
$_ORNOT_                        4
$_OR_                           9
$_XNOR_                         5
$_XOR_                         12

3.26. Executing CHECK pass (checking for obvious problems).
Checking module map9v3...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=384.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=704.00) is a direct match for cell type $_DFFSR_PNN_.
final dff cell mappings:
\DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
\DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
unmapped dff cell: $_DFF_NN0_
unmapped dff cell: $_DFF_NN1_
unmapped dff cell: $_DFF_NP0_
unmapped dff cell: $_DFF_NP1_
unmapped dff cell: $_DFF_PN0_
unmapped dff cell: $_DFF_PN1_
unmapped dff cell: $_DFF_PP0_
unmapped dff cell: $_DFF_PP1_
unmapped dff cell: $_DFFSR_NNN_
unmapped dff cell: $_DFFSR_NNP_
unmapped dff cell: $_DFFSR_NPN_
unmapped dff cell: $_DFFSR_NPP_
\DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
unmapped dff cell: $_DFFSR_PNP_
unmapped dff cell: $_DFFSR_PPN_
unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\map9v3':
mapped 33 $_DFFSR_PNN_ cells to \DFFSR cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
<suppressed ~96 debug messages>
Removed a total of 32 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \map9v3.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..
Removed 0 unused cells and 32 unused wires.
<suppressed ~1 debug messages>

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

5.9. Rerunning OPT passes. (Maybe there is more to do..)

5.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

5.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \map9v3.
Performed a total of 0 changes.

5.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

5.13. Executing OPT_DFF pass (perform DFF optimizations).

5.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

5.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

5.16. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\map9v3' to `<abc-temp-dir>/input.blif'..
Extracted 103 gates and 146 wires to a netlist network with 43 inputs and 31 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/local/share/qflow/tech/osu035/osu035_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "PADINOUT".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Scl_LibertyReadGenlib() skipped cell "PADFC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADNC" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADVDD" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "PADGND" without logic function.
ABC: Library "osu035_stdcells" from "/usr/local/share/qflow/tech/osu035/osu035_stdcells.lib" has 28 cells (11 skipped: 4 seq; 3 tri-state; 4 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.38 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        7
ABC RESULTS:           AOI21X1 cells:       10
ABC RESULTS:           AOI22X1 cells:        3
ABC RESULTS:             INVX1 cells:       34
ABC RESULTS:           NAND2X1 cells:       13
ABC RESULTS:           NAND3X1 cells:        5
ABC RESULTS:            NOR2X1 cells:       21
ABC RESULTS:            NOR3X1 cells:        1
ABC RESULTS:           OAI21X1 cells:       30
ABC RESULTS:           OAI22X1 cells:        8
ABC RESULTS:           XNOR2X1 cells:        1
ABC RESULTS:            XOR2X1 cells:        3
ABC RESULTS:        internal signals:       72
ABC RESULTS:           input signals:       43
ABC RESULTS:          output signals:       31
Removing temp directory.

7. Executing FLATTEN pass (flatten design).

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 132 unused wires.

9. Executing IOPADMAP pass (mapping inputs/outputs to IO-PAD cells).
Don't map input port map9v3.N: Missing option -inpad.
Don't map input port map9v3.clock: Missing option -inpad.
Mapping port map9v3.counter using BUFX2.
Mapping port map9v3.done using BUFX2.
Mapping port map9v3.dp using BUFX2.
Don't map input port map9v3.reset: Missing option -inpad.
Mapping port map9v3.sr using BUFX2.
Don't map input port map9v3.start: Missing option -inpad.

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \map9v3..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \map9v3.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\map9v3'.
Removed a total of 0 cells.

10.6. Executing OPT_DFF pass (perform DFF optimizations).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \map9v3..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module map9v3.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing BLIF backend.

12. Printing statistics.

=== map9v3 ===

Number of wires:                150
Number of wire bits:            207
Number of public wires:         150
Number of public wire bits:     207
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                195
AND2X2                          7
AOI21X1                        10
AOI22X1                         3
BUFX2                          26
DFFSR                          33
INVX1                          34
NAND2X1                        13
NAND3X1                         5
NOR2X1                         21
NOR3X1                          1
OAI21X1                        30
OAI22X1                         8
XNOR2X1                         1
XOR2X1                          3

End of script. Logfile hash: e538fa52de, CPU: user 0.26s system 0.02s, MEM: 9.03 MB peak
Yosys 0.16+2 (git sha1 UNKNOWN, gcc 4.8.5 -fPIC -Os)

LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.

LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Technology set to osu035 from existing qflow_vars.sh file
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project map9v3
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Vertical route layer at non-minimum pitch 3.2.  Using smaller pitch 1.6, will route on 1-of-2 tracks for layer metal4.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vlsilab/vsdflow/qflow_experiments/synthesis/map9v3.blif  --lef  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef --cel /home/vlsilab/vsdflow/qflow_experiments/layout/map9v3.cel
No map9v3.cel1 file found for project. . . no partial blockages to apply to layout.
No map9v3.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  map9v3
Running getfillcell to determine cell to use for fill.
getfillcell.tcl map9v3  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl map9v3 FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 5.0 150.0 PG map9v3  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Running arrangepins to adjust pin positions for optimal routing.
arrangepins.tcl  map9v3
Reading info file map9v3.info. . .
Reading DEF file map9v3.def. . .
Recalculating pin positions
Writing DEF file map9v3_mod.def. . .
Done with arrangepins.tcl
blifanno.tcl /home/vlsilab/vsdflow/qflow_experiments/synthesis/map9v3.blif map9v3.def /home/vlsilab/vsdflow/qflow_experiments/synthesis/map9v3_anno.blif
Generating RTL verilog and SPICE netlist file in directory
/home/vlsilab/vsdflow/qflow_experiments/synthesis
Files:
Verilog: /home/vlsilab/vsdflow/qflow_experiments/synthesis/map9v3.rtl.v
Verilog: /home/vlsilab/vsdflow/qflow_experiments/synthesis/map9v3.rtlnopwr.v
Verilog: /home/vlsilab/vsdflow/qflow_experiments/synthesis/map9v3.rtlbb.v
Spice:   /home/vlsilab/vsdflow/qflow_experiments/synthesis/map9v3.spc
Copying map9v3.rtl.v, map9v3.rtlnopwr.v, and map9v3.rtlbb.v to backups
Running blif2Verilog.
Running blif2BSpice.



--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project map9v3
Running qrouter 1.4.59.T
qrouter -noc  -s map9v3.cfg

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project map9v3
Running magic 8.3.50
magic -dnull -noconsole  migrate_map9v3.tcl

Magic 8.3 revision 50 - Compiled on Wed Apr  6 10:58:01 IST 2022.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.30(p): scaleFactor=30, multiplier=1
Errors in synthesis flow, qflow status = 1

LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.

LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Technology set to osu035 from existing qflow_vars.sh file
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project det_1011
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Vertical route layer at non-minimum pitch 3.2.  Using smaller pitch 1.6, will route on 1-of-2 tracks for layer metal4.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.blif  --lef  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef --cel /home/vlsilab/vsdflow/qflow_experiments/layout/det_1011.cel
No det_1011.cel1 file found for project. . . no partial blockages to apply to layout.
No det_1011.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  det_1011
Errors in synthesis flow, qflow status = 1

LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.

LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Technology set to osu035 from existing qflow_vars.sh file
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project det_1011
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Vertical route layer at non-minimum pitch 3.2.  Using smaller pitch 1.6, will route on 1-of-2 tracks for layer metal4.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.blif  --lef  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef --cel /home/vlsilab/vsdflow/qflow_experiments/layout/det_1011.cel
No det_1011.cel1 file found for project. . . no partial blockages to apply to layout.
No det_1011.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  det_1011

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu035 from existing qflow_vars.sh file
Regenerating files for existing project det_1011
Running qrouter 1.4.59.T
qrouter -noc  -s det_1011.cfg
Errors in synthesis flow, qflow status = 1
Errors in synthesis flow, qflow status = 1
Errors in synthesis flow, qflow status = 1
Errors in synthesis flow, qflow status = 1
Errors in synthesis flow, qflow status = 1
Errors in synthesis flow, qflow status = 1

--------------------------------
Qflow project setup
--------------------------------

Errors in synthesis flow, qflow status = 1

--------------------------------
Qflow project setup
--------------------------------

Technology set to gscl45nm from existing qflow_vars.sh file
Regenerating files for existing project det_1011
Running yosys for verilog parsing and synthesis
yosys  -s det_1011.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.16+2 (git sha1 UNKNOWN, gcc 4.8.5 -fPIC -Os)


-- Executing script file `det_1011.ys' --

1. Executing Liberty frontend.
Imported 31 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v
Parsing Verilog input from `/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v' to AST representation.
Generating RTLIL representation for module `\det_1011'.
Note: Assuming pure combinatorial block at /home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23.3-49.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \det_1011

3.1.2. Analyzing design hierarchy..
Top module:  \det_1011
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5 in module det_1011.
Marked 1 switch rules as full_case in process $proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3 in module det_1011.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
1/5: $5\next_state[2:0]
2/5: $4\next_state[2:0]
3/5: $3\next_state[2:0]
4/5: $2\next_state[2:0]
5/5: $1\next_state[2:0]
Creating decoders for process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
1/1: $0\cur_state[2:0]

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\det_1011.\next_state' from process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5': $auto$proc_dlatch.cc:427:proc_dlatch$84

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\det_1011.\cur_state' using process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
created $dff cell `$procdff$85' with positive edge clock.

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
Removing empty process `det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
Found and cleaned up 1 empty switch in `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
Removing empty process `det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
Cleaned up 6 empty switches.

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~15 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 6 unused cells and 29 unused wires.
<suppressed ~7 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module det_1011...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
New ctrl vector for $pmux cell $procmux$41: { $procmux$45_CMP $procmux$44_CMP $procmux$43_CMP $eq$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:14$1_Y }
Optimizing cells in module \det_1011.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$85 ($dff) from module det_1011 (D = \next_state, Q = \cur_state, rval = 3'000).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from mux cell det_1011.$ternary$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:14$2 ($mux).
Removed top 1 bits (of 3) from mux cell det_1011.$procmux$17 ($mux).
Removed top 1 bits (of 3) from mux cell det_1011.$procmux$26 ($mux).
Removed top 2 bits (of 3) from mux cell det_1011.$procmux$36 ($mux).
Removed top 1 bits (of 3) from port B of cell det_1011.$procmux$43_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell det_1011.$procmux$44_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell det_1011.$procmux$45_CMP0 ($eq).
Removed top 2 bits (of 3) from wire det_1011.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire det_1011.$3\next_state[2:0].

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module det_1011:
created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~2 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Consolidated identical input bits for $mux cell $procmux$17:
Old ports: A=2'00, B=2'11, Y=$4\next_state[2:0] [1:0]
New ports: A=1'0, B=1'1, Y=$4\next_state[2:0] [0]
New connections: $4\next_state[2:0] [1] = $4\next_state[2:0] [0]
Consolidated identical input bits for $mux cell $procmux$26:
Old ports: A=2'10, B=2'00, Y=$3\next_state[2:0]
New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [1]
New connections: $3\next_state[2:0] [0] = 1'0
Consolidated identical input bits for $mux cell $procmux$9:
Old ports: A=3'000, B=3'100, Y=$5\next_state[2:0]
New ports: A=1'0, B=1'1, Y=$5\next_state[2:0] [2]
New connections: $5\next_state[2:0] [1:0] = 2'00
Optimizing cells in module \det_1011.
Performed a total of 3 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~2 debug messages>

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~111 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~33 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 1 unused cells and 41 unused wires.
<suppressed ~2 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\det_1011' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 36 wires to a netlist network with 4 inputs and 5 outputs.

3.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
Unexpected END statement END PROPERTYDEFINITIONS while reading section contactResistance
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:               MUX cells:        3
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:        internal signals:       27
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        5
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>



LEF Read, Line 399: Don't know how to parse layer "poly"
--------------------------------
LEF Read, Line 400: No layer defined for RECT.
Qflow project setup
--------------------------------

Technology set to gscl45nm from existing qflow_vars.sh file
Regenerating files for existing project det_1011
Qrouter detail maze router version 1.4.59.T
Reading LEF data from file /usr/local/share/qflow/tech/gscl45nm/gscl45nm.lef.
LEF file:  Defines site CoreSite (ignored)
LEF read: Processed 2937 lines.
LEF Read: encountered 2 errors and 0 warnings total.
Vertical route layer at non-minimum pitch 0.285.  Using smaller pitch 0.19, will route on 1-of-2 tracks for layer metal4.
Vertical route layer at non-minimum pitch 0.285.  Using smaller pitch 0.19, will route on 1-of-2 tracks for layer metal5.
Horizontal route layer at non-minimum pitch 0.285.  Using smaller pitch 0.19, will route on 1-of-2 tracks for layer metal5.
Vertical route layer at non-minimum pitch 0.285.  Using smaller pitch 0.19, will route on 1-of-2 tracks for layer metal6.
Vertical route layer at non-minimum pitch 0.285.  Using smaller pitch 0.19, will route on 1-of-2 tracks for layer metal7.
Horizontal route layer at non-minimum pitch 0.855.  Using smaller pitch 0.19, will route on 1-of-5 tracks for layer metal7.
Vertical route layer at non-minimum pitch 0.855.  Using smaller pitch 0.19, will route on 1-of-5 tracks for layer metal8.
Vertical route layer at non-minimum pitch 0.855.  Using smaller pitch 0.19, will route on 1-of-5 tracks for layer metal9.
Horizontal route layer at non-minimum pitch 1.71.  Using smaller pitch 0.19, will route on 1-of-9 tracks for layer metal9.
Vertical route layer at non-minimum pitch 1.71.  Using smaller pitch 0.19, will route on 1-of-9 tracks for layer metal10.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.blif  --lef  /usr/local/share/qflow/tech/gscl45nm/gscl45nm.lef --cel /home/vlsilab/vsdflow/qflow_experiments/layout/det_1011.cel
No det_1011.cel1 file found for project. . . no partial blockages to apply to layout.
No det_1011.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  det_1011
Running getfillcell to determine cell to use for fill.
Unexpected input in LEF file:  Only macro defs were expected!
getfillcell.tcl det_1011  /usr/local/share/qflow/tech/gscl45nm/gscl45nm.lef FILL
Unexpected END statement END PROPERTYDEFINITIONS while reading section contactResistance
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl det_1011 FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 1.7 50.0 PG det_1011  /usr/local/share/qflow/tech/gscl45nm/gscl45nm.lef FILL
Running arrangepins to adjust pin positions for optimal routing.
arrangepins.tcl  det_1011
Reading info file det_1011.info. . .
Reading DEF file det_1011.def. . .

--------------------------------
Qflow project setup
--------------------------------

Technology set to gscl45nm from existing qflow_vars.sh file
Regenerating files for existing project det_1011
Running qrouter 1.4.59.T
qrouter -noc  -s det_1011.cfg
*** Running stage1 routing with defaults
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Progress: Stage 1 total routes completed: 40
No failed routes!
*** Running stage3 routing with defaults, 1st round
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Progress: Stage 3 total routes completed: 78
No failed routes!
*** Running stage3 routing with defaults, 2nd round
Nets remaining: 20
Nets remaining: 9
Progress: Stage 3 total routes completed: 115
No failed routes!
*** Writing DEF file det_1011_route.def
Final: No failed routes!
*** Writing RC file det_1011_route.rc
Running annotate.tcl antenna.out /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.rtlnopwr.v
/home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.spc /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.rtlnopwr.anno.v
/home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.anno.spc  /usr/local/share/qflow/tech/gscl45nm/gscl45nm.sp /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011_powerground

--------------------------------
Qflow project setup
--------------------------------

Technology set to gscl45nm from existing qflow_vars.sh file
Regenerating files for existing project det_1011
Running magic 8.3.50
magic -dnull -noconsole  migrate_det_1011.tcl

Magic 8.3 revision 50 - Compiled on Wed Apr  6 10:58:01 IST 2022.
Starting magic under Tcl interpreter
Using the terminal as the console.
Using NULL graphics device.
Processing system .magicrc file
Input style lambda=0.30(p): scaleFactor=30, multiplier=1
Errors in synthesis flow, qflow status = 1

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project det_1011
Running yosys for verilog parsing and synthesis
yosys  -s det_1011.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.16+2 (git sha1 UNKNOWN, gcc 4.8.5 -fPIC -Os)


-- Executing script file `det_1011.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v
Parsing Verilog input from `/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v' to AST representation.
Generating RTLIL representation for module `\det_1011'.
Note: Assuming pure combinatorial block at /home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23.3-49.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \det_1011

3.1.2. Analyzing design hierarchy..
Top module:  \det_1011
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5 in module det_1011.
Marked 1 switch rules as full_case in process $proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3 in module det_1011.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
1/5: $5\next_state[2:0]
2/5: $4\next_state[2:0]
3/5: $3\next_state[2:0]
4/5: $2\next_state[2:0]
5/5: $1\next_state[2:0]
Creating decoders for process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
1/1: $0\cur_state[2:0]

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\det_1011.\next_state' from process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5': $auto$proc_dlatch.cc:427:proc_dlatch$84

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\det_1011.\cur_state' using process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
created $dff cell `$procdff$85' with positive edge clock.

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
Removing empty process `det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
Found and cleaned up 1 empty switch in `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
Removing empty process `det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
Cleaned up 6 empty switches.

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~15 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 6 unused cells and 29 unused wires.
<suppressed ~7 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module det_1011...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
New ctrl vector for $pmux cell $procmux$41: { $procmux$45_CMP $procmux$44_CMP $procmux$43_CMP $eq$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:14$1_Y }
Optimizing cells in module \det_1011.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$85 ($dff) from module det_1011 (D = \next_state, Q = \cur_state, rval = 3'000).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from mux cell det_1011.$ternary$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:14$2 ($mux).
Removed top 1 bits (of 3) from mux cell det_1011.$procmux$17 ($mux).
Removed top 1 bits (of 3) from mux cell det_1011.$procmux$26 ($mux).
Removed top 2 bits (of 3) from mux cell det_1011.$procmux$36 ($mux).
Removed top 1 bits (of 3) from port B of cell det_1011.$procmux$43_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell det_1011.$procmux$44_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell det_1011.$procmux$45_CMP0 ($eq).
Removed top 2 bits (of 3) from wire det_1011.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire det_1011.$3\next_state[2:0].

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module det_1011:
created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~2 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Consolidated identical input bits for $mux cell $procmux$17:
Old ports: A=2'00, B=2'11, Y=$4\next_state[2:0] [1:0]
New ports: A=1'0, B=1'1, Y=$4\next_state[2:0] [0]
New connections: $4\next_state[2:0] [1] = $4\next_state[2:0] [0]
Consolidated identical input bits for $mux cell $procmux$26:
Old ports: A=2'10, B=2'00, Y=$3\next_state[2:0]
New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [1]
New connections: $3\next_state[2:0] [0] = 1'0
Consolidated identical input bits for $mux cell $procmux$9:
Old ports: A=3'000, B=3'100, Y=$5\next_state[2:0]
New ports: A=1'0, B=1'1, Y=$5\next_state[2:0] [2]
New connections: $5\next_state[2:0] [1:0] = 2'00
Optimizing cells in module \det_1011.
Performed a total of 3 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~2 debug messages>

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~111 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~33 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 1 unused cells and 41 unused wires.
<suppressed ~2 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\det_1011' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 36 wires to a netlist network with 4 inputs and 5 outputs.

3.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:               MUX cells:        3
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:        internal signals:       27
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        5
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \det_1011

3.24.2. Analyzing design hierarchy..
Top module:  \det_1011
Removed 0 unused modules.

3.25. Printing statistics.

=== det_1011 ===

Number of wires:                 25
Number of wire bits:             31
Number of public wires:           6
Number of public wire bits:      10
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 28
$_ANDNOT_                       6
$_AND_                          3
$_DLATCH_N_                     3
$_MUX_                          3
$_NAND_                         2
$_NOR_                          1
$_NOT_                          1
$_ORNOT_                        2
$_OR_                           4
$_SDFF_PN0_                     3

3.26. Executing CHECK pass (checking for obvious problems).
Checking module det_1011...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
final dff cell mappings:
\DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
\DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
unmapped dff cell: $_DFF_NN0_
unmapped dff cell: $_DFF_NN1_
unmapped dff cell: $_DFF_NP0_
unmapped dff cell: $_DFF_NP1_
unmapped dff cell: $_DFF_PN0_
unmapped dff cell: $_DFF_PN1_
unmapped dff cell: $_DFF_PP0_
unmapped dff cell: $_DFF_PP1_
unmapped dff cell: $_DFFSR_NNN_
unmapped dff cell: $_DFFSR_NNP_
unmapped dff cell: $_DFFSR_NPN_
unmapped dff cell: $_DFFSR_NPP_
\DFFSR _DFFSR_PNN_ (.CLK( C), .D( D), .Q( Q), .R( R), .S( S));
unmapped dff cell: $_DFFSR_PNP_
unmapped dff cell: $_DFFSR_PPN_
unmapped dff cell: $_DFFSR_PPP_

4.1. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).
Mapping DFF cells in module `\det_1011':
mapped 3 $_DFF_P_ cells to \DFFPOSX1 cells.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

5.6. Executing OPT_DFF pass (perform DFF optimizations).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing ABC pass (technology mapping using ABC).

6.1. Extracting gate netlist of module `\det_1011' to `<abc-temp-dir>/input.blif'..
Extracted 25 gates and 34 wires to a netlist network with 8 inputs and 8 outputs.

6.1.1. Executing ABC.
Running ABC command: /usr/local/share/qflow/bin/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_lib -w /usr/local/share/qflow/tech/osu018/osu018_stdcells.lib
ABC: Parsing finished successfully.  Parsing time =     0.00 sec
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFNEGX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFPOSX1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFSR".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "LATCH".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUFX2".
ABC: Library "osu018_stdcells" from "/usr/local/share/qflow/tech/osu018/osu018_stdcells.lib" has 26 cells (6 skipped: 4 seq; 2 tri-state; 0 no func; 0 dont_use).  Time =     0.00 sec
ABC: Memory =    0.36 MB. Time =     0.00 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FAX1").
ABC: + strash
ABC: + scorr
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + ifraig
ABC: + retime
ABC: + strash
ABC: + dch -f
ABC: + map -M 1
ABC: + write_blif <abc-temp-dir>/output.blif

6.1.2. Re-integrating ABC results.
ABC RESULTS:            AND2X2 cells:        4
ABC RESULTS:           AOI21X1 cells:        1
ABC RESULTS:             INVX1 cells:        3
ABC RESULTS:           NAND2X1 cells:        2
ABC RESULTS:            NOR2X1 cells:        4
ABC RESULTS:           OAI21X1 cells:        3
ABC RESULTS:        internal signals:       18
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        8
Removing temp directory.

7. Executing FLATTEN pass (flatten design).

8. Executing SETUNDEF pass (replace undef values with defined constants).
Removed 0 unused cells and 33 unused wires.


LEF Read, Line 191: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 192: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 196: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 197: NOTE:  Old format VIARULE ignored.

LEF Read, Line 207: NOTE:  Old format VIARULE ignored.
Technology set to osu018 from existing qflow_vars.sh file
LEF Read, Line 208: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project det_1011
LEF Read, Line 212: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 213: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef.
LEF Read, Line 223: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 224: NOTE:  Old format VIARULE ignored.
LEF read: Processed 2941 lines.
LEF Read, Line 228: NOTE:  Old format VIARULE ignored.
LEF Read: encountered 0 errors and 20 warnings total.
LEF Read, Line 229: NOTE:  Old format VIARULE ignored.
Vertical route layer at non-minimum pitch 1.6.  Using smaller pitch 0.8, will route on 1-of-2 tracks for layer metal6.
LEF Read, Line 239: NOTE:  Old format VIARULE ignored.
Running blif2cel to generate input files for graywolf
LEF Read, Line 240: NOTE:  Old format VIARULE ignored.
blif2cel.tcl --blif /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.blif  --lef  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef --cel /home/vlsilab/vsdflow/qflow_experiments/layout/det_1011.cel
LEF Read, Line 244: NOTE:  Old format VIARULE ignored.
No det_1011.cel1 file found for project. . . no partial blockages to apply to layout.
LEF Read, Line 245: NOTE:  Old format VIARULE ignored.
No det_1011.cel2 file found for project. . . continuing without pin placement hints
LEF Read, Line 255: NOTE:  Old format VIARULE ignored.
Running GrayWolf placement
LEF Read, Line 256: NOTE:  Old format VIARULE ignored.
graywolf  det_1011
LEF Read, Line 260: NOTE:  Old format VIARULE ignored.
LEF Read, Line 261: NOTE:  Old format VIARULE ignored.

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project det_1011
Running qrouter 1.4.59.T
qrouter -noc  -s det_1011.cfg
*** Running stage1 routing with defaults
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Progress: Stage 1 total routes completed: 40
No failed routes!
*** Running stage3 routing with defaults, 1st round
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Progress: Stage 3 total routes completed: 75
No failed routes!
*** Running stage3 routing with defaults, 2nd round
Nets remaining: 20
Nets remaining: 10
Nets remaining: 9
Progress: Stage 3 total routes completed: 110
No failed routes!
*** Writing DEF file det_1011_route.def
Final: No failed routes!
*** Writing RC file det_1011_route.rc
Running annotate.tcl antenna.out /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.rtlnopwr.v
/home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.spc /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.rtlnopwr.anno.v
/home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.anno.spc  /usr/local/share/qflow/tech/osu018/osu018_stdcells.sp /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011_powerground
Running annotate.tcl
found cell FILL pinlist vdd gnd
Done with annotate.tcl
Errors in synthesis flow, qflow status = 1

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu018 from existing qflow_vars.sh file
Regenerating files for existing project det_1011
Running yosys for verilog parsing and synthesis
yosys  -s det_1011.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.16+2 (git sha1 UNKNOWN, gcc 4.8.5 -fPIC -Os)


-- Executing script file `det_1011.ys' --

1. Executing Liberty frontend.
Imported 32 cell types from liberty file.

2. Executing Verilog-2005 frontend: /home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v
Parsing Verilog input from `/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v' to AST representation.
Generating RTLIL representation for module `\det_1011'.
Note: Assuming pure combinatorial block at /home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23.3-49.6 in
compliance with IEC 62142(E):2005 / IEEE Std. 1364.1(E):2002. Recommending
use of @* instead of @(...) for better match of synthesis and simulation.
Successfully finished Verilog frontend.

3. Executing SYNTH pass.

3.1. Executing HIERARCHY pass (managing design hierarchy).

3.1.1. Analyzing design hierarchy..
Top module:  \det_1011

3.1.2. Analyzing design hierarchy..
Top module:  \det_1011
Removed 0 unused modules.

3.2. Executing PROC pass (convert processes to netlists).

3.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

3.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 5 switch rules as full_case in process $proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5 in module det_1011.
Marked 1 switch rules as full_case in process $proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3 in module det_1011.
Removed a total of 0 dead cases.

3.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 1 assignment to connection.

3.2.4. Executing PROC_INIT pass (extract init attributes).

3.2.5. Executing PROC_ARST pass (detect async resets in processes).

3.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
1/5: $5\next_state[2:0]
2/5: $4\next_state[2:0]
3/5: $3\next_state[2:0]
4/5: $2\next_state[2:0]
5/5: $1\next_state[2:0]
Creating decoders for process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
1/1: $0\cur_state[2:0]

3.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
Latch inferred for signal `\det_1011.\next_state' from process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5': $auto$proc_dlatch.cc:427:proc_dlatch$84

3.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\det_1011.\cur_state' using process `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
created $dff cell `$procdff$85' with positive edge clock.

3.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

3.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 5 empty switches in `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
Removing empty process `det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:23$5'.
Found and cleaned up 1 empty switch in `\det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
Removing empty process `det_1011.$proc$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:16$3'.
Cleaned up 6 empty switches.

3.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~15 debug messages>

3.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 6 unused cells and 29 unused wires.
<suppressed ~7 debug messages>

3.5. Executing CHECK pass (checking for obvious problems).
Checking module det_1011...
Found and reported 0 problems.

3.6. Executing OPT pass (performing simple optimizations).

3.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
New ctrl vector for $pmux cell $procmux$41: { $procmux$45_CMP $procmux$44_CMP $procmux$43_CMP $eq$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:14$1_Y }
Optimizing cells in module \det_1011.
Performed a total of 1 changes.

3.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.6.6. Executing OPT_DFF pass (perform DFF optimizations).

3.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.9. Rerunning OPT passes. (Maybe there is more to do..)

3.6.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.6.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.6.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.6.13. Executing OPT_DFF pass (perform DFF optimizations).

3.6.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.6.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.6.16. Finished OPT passes. (There is nothing left to do.)

3.7. Executing FSM pass (extract and optimize FSM).

3.7.1. Executing FSM_DETECT pass (finding FSMs in design).

3.7.2. Executing FSM_EXTRACT pass (extracting FSM from design).

3.7.3. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.7.5. Executing FSM_OPT pass (simple optimizations of FSMs).

3.7.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

3.7.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

3.7.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

3.8. Executing OPT pass (performing simple optimizations).

3.8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~3 debug messages>

3.8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.6. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$85 ($dff) from module det_1011 (D = \next_state, Q = \cur_state, rval = 3'000).

3.8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

3.8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.9. Rerunning OPT passes. (Maybe there is more to do..)

3.8.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.8.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.8.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.8.13. Executing OPT_DFF pass (perform DFF optimizations).

3.8.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.8.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.8.16. Finished OPT passes. (There is nothing left to do.)

3.9. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from mux cell det_1011.$ternary$/home/vlsilab/vsdflow/qflow_experiments/source/det_1011.v:14$2 ($mux).
Removed top 1 bits (of 3) from mux cell det_1011.$procmux$17 ($mux).
Removed top 1 bits (of 3) from mux cell det_1011.$procmux$26 ($mux).
Removed top 2 bits (of 3) from mux cell det_1011.$procmux$36 ($mux).
Removed top 1 bits (of 3) from port B of cell det_1011.$procmux$43_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell det_1011.$procmux$44_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell det_1011.$procmux$45_CMP0 ($eq).
Removed top 2 bits (of 3) from wire det_1011.$2\next_state[2:0].
Removed top 1 bits (of 3) from wire det_1011.$3\next_state[2:0].

3.10. Executing PEEPOPT pass (run peephole optimizers).

3.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

3.12. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module det_1011:
created 0 $alu and 0 $macc cells.

3.13. Executing SHARE pass (SAT-based resource sharing).

3.14. Executing OPT pass (performing simple optimizations).

3.14.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.14.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.14.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

3.14.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.14.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.14.6. Executing OPT_DFF pass (perform DFF optimizations).

3.14.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.14.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.14.9. Finished OPT passes. (There is nothing left to do.)

3.15. Executing MEMORY pass.

3.15.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

3.15.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

3.15.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

3.15.4. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

3.15.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.15.6. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

3.15.7. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

3.15.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.15.9. Executing MEMORY_COLLECT pass (generating $mem cells).

3.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.17. Executing OPT pass (performing simple optimizations).

3.17.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~2 debug messages>

3.17.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.17.3. Executing OPT_DFF pass (perform DFF optimizations).

3.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

3.17.5. Finished fast OPT passes.

3.18. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

3.19. Executing OPT pass (performing simple optimizations).

3.19.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Consolidated identical input bits for $mux cell $procmux$17:
Old ports: A=2'00, B=2'11, Y=$4\next_state[2:0] [1:0]
New ports: A=1'0, B=1'1, Y=$4\next_state[2:0] [0]
New connections: $4\next_state[2:0] [1] = $4\next_state[2:0] [0]
Consolidated identical input bits for $mux cell $procmux$26:
Old ports: A=2'10, B=2'00, Y=$3\next_state[2:0]
New ports: A=1'1, B=1'0, Y=$3\next_state[2:0] [1]
New connections: $3\next_state[2:0] [0] = 1'0
Consolidated identical input bits for $mux cell $procmux$9:
Old ports: A=3'000, B=3'100, Y=$5\next_state[2:0]
New ports: A=1'0, B=1'1, Y=$5\next_state[2:0] [2]
New connections: $5\next_state[2:0] [1:0] = 2'00
Optimizing cells in module \det_1011.
Performed a total of 3 changes.

3.19.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

3.19.6. Executing OPT_SHARE pass.

3.19.7. Executing OPT_DFF pass (perform DFF optimizations).

3.19.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.19.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~2 debug messages>

3.19.10. Rerunning OPT passes. (Maybe there is more to do..)

3.19.11. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.12. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.19.13. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.14. Executing OPT_SHARE pass.

3.19.15. Executing OPT_DFF pass (perform DFF optimizations).

3.19.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

3.19.17. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.18. Rerunning OPT passes. (Maybe there is more to do..)

3.19.19. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \det_1011..
Creating internal representation of mux trees.
Evaluating internal representation of mux trees.
Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

3.19.20. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
Optimizing cells in module \det_1011.
Performed a total of 0 changes.

3.19.21. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.19.22. Executing OPT_SHARE pass.

3.19.23. Executing OPT_DFF pass (perform DFF optimizations).

3.19.24. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..

3.19.25. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.19.26. Finished OPT passes. (There is nothing left to do.)

3.20. Executing TECHMAP pass (map to technology primitives).

3.20.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

3.20.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $sdff.
Using template $paramod$d31bf4d7d72e59528d18fbd4f322e9d608532043\_90_pmux for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $dlatch.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $mux.
No more expansions possible.
<suppressed ~111 debug messages>

3.21. Executing OPT pass (performing simple optimizations).

3.21.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.
<suppressed ~33 debug messages>

3.21.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
<suppressed ~12 debug messages>
Removed a total of 4 cells.

3.21.3. Executing OPT_DFF pass (perform DFF optimizations).

3.21.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 1 unused cells and 41 unused wires.
<suppressed ~2 debug messages>

3.21.5. Finished fast OPT passes.

3.22. Executing ABC pass (technology mapping using ABC).

3.22.1. Extracting gate netlist of module `\det_1011' to `<abc-temp-dir>/input.blif'..
Extracted 31 gates and 36 wires to a netlist network with 4 inputs and 5 outputs.

3.22.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC:
ABC: + read_blif <abc-temp-dir>/input.blif
ABC: + read_library <abc-temp-dir>/stdcells.genlib
ABC: Entered genlib library with 13 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash
ABC: + dretime
ABC: + map
ABC: + write_blif <abc-temp-dir>/output.blif

3.22.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        3
ABC RESULTS:            ANDNOT cells:        6
ABC RESULTS:               MUX cells:        3
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:        1
ABC RESULTS:               NOT cells:        1
ABC RESULTS:                OR cells:        4
ABC RESULTS:             ORNOT cells:        2
ABC RESULTS:        internal signals:       27
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        5
Removing temp directory.

3.23. Executing OPT pass (performing simple optimizations).

3.23.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module det_1011.

3.23.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\det_1011'.
Removed a total of 0 cells.

3.23.3. Executing OPT_DFF pass (perform DFF optimizations).

3.23.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \det_1011..
Removed 0 unused cells and 30 unused wires.
<suppressed ~1 debug messages>

3.23.5. Finished fast OPT passes.

3.24. Executing HIERARCHY pass (managing design hierarchy).

3.24.1. Analyzing design hierarchy..
Top module:  \det_1011

3.24.2. Analyzing design hierarchy..
Top module:  \det_1011
Removed 0 unused modules.

3.25. Printing statistics.

=== det_1011 ===

Number of wires:                 25
Number of wire bits:             31
Number of public wires:           6
Number of public wire bits:      10
Number of memories:               0
Number of memory bits:            0
Number of processes:              0
Number of cells:                 28
$_ANDNOT_                       6
$_AND_                          3
$_DLATCH_N_                     3
$_MUX_                          3
$_NAND_                         2
$_NOR_                          1
$_NOT_                          1
$_ORNOT_                        2
$_OR_                           4
$_SDFF_PN0_                     3

3.26. Executing CHECK pass (checking for obvious problems).
Checking module det_1011...
Found and reported 0 problems.

4. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
cell DFFNEGX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_N_.
cell DFFPOSX1 (noninv, pins=3, area=96.00) is a direct match for cell type $_DFF_P_.
cell DFFSR (noninv, pins=5, area=176.00) is a direct match for cell type $_DFFSR_PNN_.
final dff cell mappings:
\DFFNEGX1 _DFF_N_ (.CLK( C), .D( D), .Q( Q));
\DFFPOSX1 _DFF_P_ (.CLK( C), .D( D), .Q( Q));
unmapped dff cell: $_DFF_NN0_
unmapped dff cell: $_DFF_NN1_
unmapped dff cell: $_DFF_NP0_
unmapped dff cell: $_DFF_NP1_
unmapped dff cell: $_DFF_PN0_
unmapped dff cell: $_DFF_PN1_
unmapped dff cell: $_DFF_PP0_
unmapped dff cell: $_DFF_PP1_
unmapped dff cell: $_DFFSR_NNN_
unmapped dff cell: $_DFFSR_NNP_
unmapped dff cell: $_DFFSR_NPN_


LEF Read, Line 191: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 192: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 196: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 197: NOTE:  Old format VIARULE ignored.

LEF Read, Line 207: NOTE:  Old format VIARULE ignored.
Technology set to osu018 from existing qflow_vars.sh file
LEF Read, Line 208: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project det_1011
LEF Read, Line 212: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 213: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef.
LEF Read, Line 223: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 224: NOTE:  Old format VIARULE ignored.
LEF read: Processed 2941 lines.
LEF Read, Line 228: NOTE:  Old format VIARULE ignored.
LEF Read: encountered 0 errors and 20 warnings total.
LEF Read, Line 229: NOTE:  Old format VIARULE ignored.
Vertical route layer at non-minimum pitch 1.6.  Using smaller pitch 0.8, will route on 1-of-2 tracks for layer metal6.
LEF Read, Line 239: NOTE:  Old format VIARULE ignored.
Running blif2cel to generate input files for graywolf
LEF Read, Line 240: NOTE:  Old format VIARULE ignored.
blif2cel.tcl --blif /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.blif  --lef  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef --cel /home/vlsilab/vsdflow/qflow_experiments/layout/det_1011.cel
LEF Read, Line 244: NOTE:  Old format VIARULE ignored.
No det_1011.cel1 file found for project. . . no partial blockages to apply to layout.
LEF Read, Line 245: NOTE:  Old format VIARULE ignored.
No det_1011.cel2 file found for project. . . continuing without pin placement hints
LEF Read, Line 255: NOTE:  Old format VIARULE ignored.
Running GrayWolf placement
LEF Read, Line 256: NOTE:  Old format VIARULE ignored.
graywolf  det_1011
LEF Read, Line 260: NOTE:  Old format VIARULE ignored.
LEF Read, Line 261: NOTE:  Old format VIARULE ignored.
Running getfillcell to determine cell to use for fill.
getfillcell.tcl det_1011  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl det_1011 FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 2.0 50.0 PG det_1011  /usr/local/share/qflow/tech/osu018/osu018_stdcells.lef FILL
Running arrangepins to adjust pin positions for optimal routing.
Errors in synthesis flow, qflow status = 1

LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.

LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Technology set to osu035_redm4 from existing qflow_vars.sh file
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project det_1011
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.blif  --lef  /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef --cel /home/vlsilab/vsdflow/qflow_experiments/layout/det_1011.cel
No det_1011.cel1 file found for project. . . no partial blockages to apply to layout.
No det_1011.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  det_1011
Running getfillcell to determine cell to use for fill.
getfillcell.tcl det_1011  /usr/local/share/qflow/tech/osu035_redm4/osu035_redm4_stdcells.lef FILL
Errors in synthesis flow, qflow status = 1

LEF Read, Line 135: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 140: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 141: NOTE:  Old format VIARULE ignored.

LEF Read, Line 151: NOTE:  Old format VIARULE ignored.
Technology set to osu035 from existing qflow_vars.sh file
LEF Read, Line 152: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project det_1011
LEF Read, Line 156: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 157: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef.
LEF Read, Line 167: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site corner (ignored)
LEF Read, Line 168: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site IO (ignored)
LEF Read, Line 172: NOTE:  Old format VIARULE ignored.
LEF file:  Defines site core (ignored)
LEF Read, Line 173: NOTE:  Old format VIARULE ignored.
LEF read: Processed 3179 lines.
LEF Read: encountered 0 errors and 12 warnings total.
Vertical route layer at non-minimum pitch 3.2.  Using smaller pitch 1.6, will route on 1-of-2 tracks for layer metal4.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.blif  --lef  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef --cel /home/vlsilab/vsdflow/qflow_experiments/layout/det_1011.cel
No det_1011.cel1 file found for project. . . no partial blockages to apply to layout.
No det_1011.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  det_1011
Running getfillcell to determine cell to use for fill.
getfillcell.tcl det_1011  /usr/local/share/qflow/tech/osu035/osu035_stdcells.lef FILL
Errors in synthesis flow, qflow status = 1

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu050 from existing qflow_vars.sh file
Regenerating files for existing project det_1011
Running yosys for verilog parsing and synthesis
yosys  -s det_1011.ys

/----------------------------------------------------------------------------\
|                                                                            |
|  yosys -- Yosys Open SYnthesis Suite                                       |
|                                                                            |
|  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
|                                                                            |
|  Permission to use, copy, modify, and/or distribute this software for any  |
|  purpose with or without fee is hereby granted, provided that the above    |
|  copyright notice and this permission notice appear in all copies.         |
|                                                                            |
|  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
|  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
|  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
|  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
|  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
|  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
|  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
|                                                                            |
\----------------------------------------------------------------------------/

Yosys 0.16+2 (git sha1 UNKNOWN, gcc 4.8.5 -fPIC -Os)


LEF Read, Line 115: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 116: NOTE:  Old format VIARULE ignored.
Qflow project setup
LEF Read, Line 120: NOTE:  Old format VIARULE ignored.
--------------------------------
LEF Read, Line 121: NOTE:  Old format VIARULE ignored.

LEF Read, Line 131: NOTE:  Old format VIARULE ignored.
Technology set to osu050 from existing qflow_vars.sh file
LEF Read, Line 132: NOTE:  Old format VIARULE ignored.
Regenerating files for existing project det_1011
LEF Read, Line 136: NOTE:  Old format VIARULE ignored.
Qrouter detail maze router version 1.4.59.T
LEF Read, Line 137: NOTE:  Old format VIARULE ignored.
Reading LEF data from file /usr/local/share/qflow/tech/osu050/osu050_stdcells.lef.
LEF file:  Defines site corner (ignored)
LEF file:  Defines site IO (ignored)
LEF file:  Defines site core (ignored)
LEF read: Processed 3221 lines.
LEF Read: encountered 0 errors and 8 warnings total.
Running blif2cel to generate input files for graywolf
blif2cel.tcl --blif /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.blif  --lef  /usr/local/share/qflow/tech/osu050/osu050_stdcells.lef --cel /home/vlsilab/vsdflow/qflow_experiments/layout/det_1011.cel
No det_1011.cel1 file found for project. . . no partial blockages to apply to layout.
No det_1011.cel2 file found for project. . . continuing without pin placement hints
Running GrayWolf placement
graywolf  det_1011
Running getfillcell to determine cell to use for fill.
getfillcell.tcl det_1011  /usr/local/share/qflow/tech/osu050/osu050_stdcells.lef FILL
Using cell FILL for fill
Running place2def to translate graywolf output to DEF format.
place2def.tcl det_1011 FILL
Running addspacers to generate power stripes and align cell right edge
addspacers.tcl  -stripe 8.0 225.0 PG det_1011  /usr/local/share/qflow/tech/osu050/osu050_stdcells.lef FILL

--------------------------------
Qflow project setup
--------------------------------

Technology set to osu050 from existing qflow_vars.sh file
Regenerating files for existing project det_1011
Running qrouter 1.4.59.T
qrouter -noc  -s det_1011.cfg
*** Running stage1 routing with defaults
Nets remaining: 20
Nets remaining: 10
Progress: Stage 1 total routes completed: 39
Failed net routes: 1
*** Running stage2 routing with options mask 10, effort 10
Nets remaining: 1
Nets remaining: 1
Progress: Stage 2 total routes completed: 43
No failed routes!
*** Running stage3 routing with defaults, 1st round
Nets remaining: 20
Nets remaining: 9
Progress: Stage 3 total routes completed: 80
No failed routes!
*** Running stage3 routing with defaults, 2nd round
Nets remaining: 20
Nets remaining: 9
Progress: Stage 3 total routes completed: 117
No failed routes!
*** Writing DEF file det_1011_route.def
Final: No failed routes!
*** Writing RC file det_1011_route.rc
Running annotate.tcl antenna.out /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.rtlnopwr.v
/home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.spc /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.rtlnopwr.anno.v
/home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011.anno.spc  /usr/local/share/qflow/tech/osu050/osu050_stdcells.sp /home/vlsilab/vsdflow/qflow_experiments/synthesis/det_1011_powerground

Errors in synthesis flow, qflow status = 1
